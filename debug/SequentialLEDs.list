
SequentialLEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000704  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000810  08000810  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000810  08000810  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000810  08000810  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000810  08000810  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000810  08000810  00001810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000814  08000814  00001814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000818  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  0800081c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  0800081c  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f10  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000696  00000000  00000000  00002f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  000035d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000176  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ffc  00000000  00000000  00003966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017eb  00000000  00000000  00018962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c31c  00000000  00000000  0001a14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00096469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000620  00000000  00000000  000964ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00096acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080007f8 	.word	0x080007f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080007f8 	.word	0x080007f8

0800014c <GPIO_SetPinMode>:
#include "GPIO_interface.h"
#include "GPIO_private.h"
#include "GPIO_config.h"

/* -------------------- IMPLEMENTATIONS -------------------- */
STD_ERR GPIO_SetPinMode(uint8 Port, uint8 Pin, uint8 Mode){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	460b      	mov	r3, r1
 8000158:	71bb      	strb	r3, [r7, #6]
 800015a:	4613      	mov	r3, r2
 800015c:	717b      	strb	r3, [r7, #5]
    STD_ERR ret = ERR;
 800015e:	2300      	movs	r3, #0
 8000160:	73fb      	strb	r3, [r7, #15]

    switch(Port){
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	2b02      	cmp	r3, #2
 8000166:	d07d      	beq.n	8000264 <GPIO_SetPinMode+0x118>
 8000168:	2b02      	cmp	r3, #2
 800016a:	f300 80b6 	bgt.w	80002da <GPIO_SetPinMode+0x18e>
 800016e:	2b00      	cmp	r3, #0
 8000170:	d002      	beq.n	8000178 <GPIO_SetPinMode+0x2c>
 8000172:	2b01      	cmp	r3, #1
 8000174:	d03b      	beq.n	80001ee <GPIO_SetPinMode+0xa2>
 8000176:	e0b0      	b.n	80002da <GPIO_SetPinMode+0x18e>
        case GPIOA:
            if(Pin < 8){
 8000178:	79bb      	ldrb	r3, [r7, #6]
 800017a:	2b07      	cmp	r3, #7
 800017c:	d817      	bhi.n	80001ae <GPIO_SetPinMode+0x62>
                /* Clear mode bits */
                GPIOA_CRL_REG &= ~(0b1111 << (Pin * 4));
 800017e:	4b5b      	ldr	r3, [pc, #364]	@ (80002ec <GPIO_SetPinMode+0x1a0>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	79ba      	ldrb	r2, [r7, #6]
 8000184:	0092      	lsls	r2, r2, #2
 8000186:	210f      	movs	r1, #15
 8000188:	fa01 f202 	lsl.w	r2, r1, r2
 800018c:	43d2      	mvns	r2, r2
 800018e:	4611      	mov	r1, r2
 8000190:	4a56      	ldr	r2, [pc, #344]	@ (80002ec <GPIO_SetPinMode+0x1a0>)
 8000192:	400b      	ands	r3, r1
 8000194:	6013      	str	r3, [r2, #0]
                /* Set mode bits */
                GPIOA_CRL_REG |= (Mode << (Pin * 4));
 8000196:	4b55      	ldr	r3, [pc, #340]	@ (80002ec <GPIO_SetPinMode+0x1a0>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	7979      	ldrb	r1, [r7, #5]
 800019c:	79ba      	ldrb	r2, [r7, #6]
 800019e:	0092      	lsls	r2, r2, #2
 80001a0:	fa01 f202 	lsl.w	r2, r1, r2
 80001a4:	4611      	mov	r1, r2
 80001a6:	4a51      	ldr	r2, [pc, #324]	@ (80002ec <GPIO_SetPinMode+0x1a0>)
 80001a8:	430b      	orrs	r3, r1
 80001aa:	6013      	str	r3, [r2, #0]
 80001ac:	e01c      	b.n	80001e8 <GPIO_SetPinMode+0x9c>
            }
            else if(Pin < 16){
 80001ae:	79bb      	ldrb	r3, [r7, #6]
 80001b0:	2b0f      	cmp	r3, #15
 80001b2:	d819      	bhi.n	80001e8 <GPIO_SetPinMode+0x9c>
                /* minus 8 to return to bit 0 not 8 */
                Pin -= 8;
 80001b4:	79bb      	ldrb	r3, [r7, #6]
 80001b6:	3b08      	subs	r3, #8
 80001b8:	71bb      	strb	r3, [r7, #6]
                /* Clear mode bits */
                GPIOA_CRL_REG &= ~(0b1111 << (Pin * 4));
 80001ba:	4b4c      	ldr	r3, [pc, #304]	@ (80002ec <GPIO_SetPinMode+0x1a0>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	79ba      	ldrb	r2, [r7, #6]
 80001c0:	0092      	lsls	r2, r2, #2
 80001c2:	210f      	movs	r1, #15
 80001c4:	fa01 f202 	lsl.w	r2, r1, r2
 80001c8:	43d2      	mvns	r2, r2
 80001ca:	4611      	mov	r1, r2
 80001cc:	4a47      	ldr	r2, [pc, #284]	@ (80002ec <GPIO_SetPinMode+0x1a0>)
 80001ce:	400b      	ands	r3, r1
 80001d0:	6013      	str	r3, [r2, #0]
                /* Set mode bits */
                GPIOA_CRL_REG |= (Mode << (Pin * 4));
 80001d2:	4b46      	ldr	r3, [pc, #280]	@ (80002ec <GPIO_SetPinMode+0x1a0>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	7979      	ldrb	r1, [r7, #5]
 80001d8:	79ba      	ldrb	r2, [r7, #6]
 80001da:	0092      	lsls	r2, r2, #2
 80001dc:	fa01 f202 	lsl.w	r2, r1, r2
 80001e0:	4611      	mov	r1, r2
 80001e2:	4a42      	ldr	r2, [pc, #264]	@ (80002ec <GPIO_SetPinMode+0x1a0>)
 80001e4:	430b      	orrs	r3, r1
 80001e6:	6013      	str	r3, [r2, #0]
            }
            ret = N_ERR;
 80001e8:	2301      	movs	r3, #1
 80001ea:	73fb      	strb	r3, [r7, #15]
            break;
 80001ec:	e077      	b.n	80002de <GPIO_SetPinMode+0x192>
        case GPIOB:
            if(Pin < 8){
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	2b07      	cmp	r3, #7
 80001f2:	d817      	bhi.n	8000224 <GPIO_SetPinMode+0xd8>
                /* Clear mode bits */
                GPIOB_CRL_REG &= ~(0b1111 << (Pin * 4));
 80001f4:	4b3e      	ldr	r3, [pc, #248]	@ (80002f0 <GPIO_SetPinMode+0x1a4>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	79ba      	ldrb	r2, [r7, #6]
 80001fa:	0092      	lsls	r2, r2, #2
 80001fc:	210f      	movs	r1, #15
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	43d2      	mvns	r2, r2
 8000204:	4611      	mov	r1, r2
 8000206:	4a3a      	ldr	r2, [pc, #232]	@ (80002f0 <GPIO_SetPinMode+0x1a4>)
 8000208:	400b      	ands	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
                /* Set mode bits */
                GPIOB_CRL_REG |= (Mode << (Pin * 4));
 800020c:	4b38      	ldr	r3, [pc, #224]	@ (80002f0 <GPIO_SetPinMode+0x1a4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	7979      	ldrb	r1, [r7, #5]
 8000212:	79ba      	ldrb	r2, [r7, #6]
 8000214:	0092      	lsls	r2, r2, #2
 8000216:	fa01 f202 	lsl.w	r2, r1, r2
 800021a:	4611      	mov	r1, r2
 800021c:	4a34      	ldr	r2, [pc, #208]	@ (80002f0 <GPIO_SetPinMode+0x1a4>)
 800021e:	430b      	orrs	r3, r1
 8000220:	6013      	str	r3, [r2, #0]
 8000222:	e01c      	b.n	800025e <GPIO_SetPinMode+0x112>
            }
            else if(Pin < 16){
 8000224:	79bb      	ldrb	r3, [r7, #6]
 8000226:	2b0f      	cmp	r3, #15
 8000228:	d819      	bhi.n	800025e <GPIO_SetPinMode+0x112>
                /* minus 8 to return to bit 0 not 8 */
                Pin -= 8;
 800022a:	79bb      	ldrb	r3, [r7, #6]
 800022c:	3b08      	subs	r3, #8
 800022e:	71bb      	strb	r3, [r7, #6]
                /* Clear mode bits */
                GPIOB_CRL_REG &= ~(0b1111 << (Pin * 4));
 8000230:	4b2f      	ldr	r3, [pc, #188]	@ (80002f0 <GPIO_SetPinMode+0x1a4>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	79ba      	ldrb	r2, [r7, #6]
 8000236:	0092      	lsls	r2, r2, #2
 8000238:	210f      	movs	r1, #15
 800023a:	fa01 f202 	lsl.w	r2, r1, r2
 800023e:	43d2      	mvns	r2, r2
 8000240:	4611      	mov	r1, r2
 8000242:	4a2b      	ldr	r2, [pc, #172]	@ (80002f0 <GPIO_SetPinMode+0x1a4>)
 8000244:	400b      	ands	r3, r1
 8000246:	6013      	str	r3, [r2, #0]
                /* Set mode bits */
                GPIOB_CRL_REG |= (Mode << (Pin * 4));
 8000248:	4b29      	ldr	r3, [pc, #164]	@ (80002f0 <GPIO_SetPinMode+0x1a4>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	7979      	ldrb	r1, [r7, #5]
 800024e:	79ba      	ldrb	r2, [r7, #6]
 8000250:	0092      	lsls	r2, r2, #2
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	4611      	mov	r1, r2
 8000258:	4a25      	ldr	r2, [pc, #148]	@ (80002f0 <GPIO_SetPinMode+0x1a4>)
 800025a:	430b      	orrs	r3, r1
 800025c:	6013      	str	r3, [r2, #0]
            }
            ret = N_ERR;
 800025e:	2301      	movs	r3, #1
 8000260:	73fb      	strb	r3, [r7, #15]
            break;
 8000262:	e03c      	b.n	80002de <GPIO_SetPinMode+0x192>
        case GPIOC:
            if(Pin < 8){
 8000264:	79bb      	ldrb	r3, [r7, #6]
 8000266:	2b07      	cmp	r3, #7
 8000268:	d817      	bhi.n	800029a <GPIO_SetPinMode+0x14e>
                /* Clear mode bits */
                GPIOC_CRL_REG &= ~(0b1111 << (Pin * 4));
 800026a:	4b22      	ldr	r3, [pc, #136]	@ (80002f4 <GPIO_SetPinMode+0x1a8>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79ba      	ldrb	r2, [r7, #6]
 8000270:	0092      	lsls	r2, r2, #2
 8000272:	210f      	movs	r1, #15
 8000274:	fa01 f202 	lsl.w	r2, r1, r2
 8000278:	43d2      	mvns	r2, r2
 800027a:	4611      	mov	r1, r2
 800027c:	4a1d      	ldr	r2, [pc, #116]	@ (80002f4 <GPIO_SetPinMode+0x1a8>)
 800027e:	400b      	ands	r3, r1
 8000280:	6013      	str	r3, [r2, #0]
                /* Set mode bits */
                GPIOC_CRL_REG |= (Mode << (Pin * 4));
 8000282:	4b1c      	ldr	r3, [pc, #112]	@ (80002f4 <GPIO_SetPinMode+0x1a8>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	7979      	ldrb	r1, [r7, #5]
 8000288:	79ba      	ldrb	r2, [r7, #6]
 800028a:	0092      	lsls	r2, r2, #2
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	4611      	mov	r1, r2
 8000292:	4a18      	ldr	r2, [pc, #96]	@ (80002f4 <GPIO_SetPinMode+0x1a8>)
 8000294:	430b      	orrs	r3, r1
 8000296:	6013      	str	r3, [r2, #0]
 8000298:	e01c      	b.n	80002d4 <GPIO_SetPinMode+0x188>
            }
            else if(Pin < 16){
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	2b0f      	cmp	r3, #15
 800029e:	d819      	bhi.n	80002d4 <GPIO_SetPinMode+0x188>
                /* minus 8 to return to bit 0 not 8 */
                Pin -= 8;
 80002a0:	79bb      	ldrb	r3, [r7, #6]
 80002a2:	3b08      	subs	r3, #8
 80002a4:	71bb      	strb	r3, [r7, #6]
                /* Clear mode bits */
                GPIOC_CRL_REG &= ~(0b1111 << (Pin * 4));
 80002a6:	4b13      	ldr	r3, [pc, #76]	@ (80002f4 <GPIO_SetPinMode+0x1a8>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	79ba      	ldrb	r2, [r7, #6]
 80002ac:	0092      	lsls	r2, r2, #2
 80002ae:	210f      	movs	r1, #15
 80002b0:	fa01 f202 	lsl.w	r2, r1, r2
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	4611      	mov	r1, r2
 80002b8:	4a0e      	ldr	r2, [pc, #56]	@ (80002f4 <GPIO_SetPinMode+0x1a8>)
 80002ba:	400b      	ands	r3, r1
 80002bc:	6013      	str	r3, [r2, #0]
                /* Set mode bits */
                GPIOC_CRL_REG |= (Mode << (Pin * 4));
 80002be:	4b0d      	ldr	r3, [pc, #52]	@ (80002f4 <GPIO_SetPinMode+0x1a8>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	7979      	ldrb	r1, [r7, #5]
 80002c4:	79ba      	ldrb	r2, [r7, #6]
 80002c6:	0092      	lsls	r2, r2, #2
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	4611      	mov	r1, r2
 80002ce:	4a09      	ldr	r2, [pc, #36]	@ (80002f4 <GPIO_SetPinMode+0x1a8>)
 80002d0:	430b      	orrs	r3, r1
 80002d2:	6013      	str	r3, [r2, #0]
            }
            ret = N_ERR;
 80002d4:	2301      	movs	r3, #1
 80002d6:	73fb      	strb	r3, [r7, #15]
            break;
 80002d8:	e001      	b.n	80002de <GPIO_SetPinMode+0x192>
        default:
            ret = ERR;
 80002da:	2300      	movs	r3, #0
 80002dc:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 80002de:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40010800 	.word	0x40010800
 80002f0:	40010c00 	.word	0x40010c00
 80002f4:	40011000 	.word	0x40011000

080002f8 <GPIO_SetPinValue>:

STD_ERR GPIO_SetPinValue(uint8 Port, uint8 Pin, uint8 Value){
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
 8000302:	460b      	mov	r3, r1
 8000304:	71bb      	strb	r3, [r7, #6]
 8000306:	4613      	mov	r3, r2
 8000308:	717b      	strb	r3, [r7, #5]
    STD_ERR ret = ERR;
 800030a:	2300      	movs	r3, #0
 800030c:	73fb      	strb	r3, [r7, #15]

    switch(Port){
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	2b02      	cmp	r3, #2
 8000312:	d04e      	beq.n	80003b2 <GPIO_SetPinValue+0xba>
 8000314:	2b02      	cmp	r3, #2
 8000316:	dc70      	bgt.n	80003fa <GPIO_SetPinValue+0x102>
 8000318:	2b00      	cmp	r3, #0
 800031a:	d002      	beq.n	8000322 <GPIO_SetPinValue+0x2a>
 800031c:	2b01      	cmp	r3, #1
 800031e:	d024      	beq.n	800036a <GPIO_SetPinValue+0x72>
 8000320:	e06b      	b.n	80003fa <GPIO_SetPinValue+0x102>
        case GPIOA:
            if(Value == GPIO_HIGH){
 8000322:	797b      	ldrb	r3, [r7, #5]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d10c      	bne.n	8000342 <GPIO_SetPinValue+0x4a>
                SET_BIT(GPIOA_ODR_REG, Pin);
 8000328:	4b37      	ldr	r3, [pc, #220]	@ (8000408 <GPIO_SetPinValue+0x110>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	2101      	movs	r1, #1
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a34      	ldr	r2, [pc, #208]	@ (8000408 <GPIO_SetPinValue+0x110>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
                ret = N_ERR;
 800033c:	2301      	movs	r3, #1
 800033e:	73fb      	strb	r3, [r7, #15]
                ret = N_ERR;
            }
            else{
                ret = ERR;
            }
            break;
 8000340:	e05b      	b.n	80003fa <GPIO_SetPinValue+0x102>
            else if(Value == GPIO_LOW){
 8000342:	797b      	ldrb	r3, [r7, #5]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d10d      	bne.n	8000364 <GPIO_SetPinValue+0x6c>
                CLR_BIT(GPIOA_ODR_REG, Pin);
 8000348:	4b2f      	ldr	r3, [pc, #188]	@ (8000408 <GPIO_SetPinValue+0x110>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	79ba      	ldrb	r2, [r7, #6]
 800034e:	2101      	movs	r1, #1
 8000350:	fa01 f202 	lsl.w	r2, r1, r2
 8000354:	43d2      	mvns	r2, r2
 8000356:	4611      	mov	r1, r2
 8000358:	4a2b      	ldr	r2, [pc, #172]	@ (8000408 <GPIO_SetPinValue+0x110>)
 800035a:	400b      	ands	r3, r1
 800035c:	6013      	str	r3, [r2, #0]
                ret = N_ERR;
 800035e:	2301      	movs	r3, #1
 8000360:	73fb      	strb	r3, [r7, #15]
            break;
 8000362:	e04a      	b.n	80003fa <GPIO_SetPinValue+0x102>
                ret = ERR;
 8000364:	2300      	movs	r3, #0
 8000366:	73fb      	strb	r3, [r7, #15]
            break;
 8000368:	e047      	b.n	80003fa <GPIO_SetPinValue+0x102>
        case GPIOB:
            if(Value == GPIO_HIGH){
 800036a:	797b      	ldrb	r3, [r7, #5]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d10c      	bne.n	800038a <GPIO_SetPinValue+0x92>
                SET_BIT(GPIOB_ODR_REG, Pin);
 8000370:	4b26      	ldr	r3, [pc, #152]	@ (800040c <GPIO_SetPinValue+0x114>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	79ba      	ldrb	r2, [r7, #6]
 8000376:	2101      	movs	r1, #1
 8000378:	fa01 f202 	lsl.w	r2, r1, r2
 800037c:	4611      	mov	r1, r2
 800037e:	4a23      	ldr	r2, [pc, #140]	@ (800040c <GPIO_SetPinValue+0x114>)
 8000380:	430b      	orrs	r3, r1
 8000382:	6013      	str	r3, [r2, #0]
                ret = N_ERR;
 8000384:	2301      	movs	r3, #1
 8000386:	73fb      	strb	r3, [r7, #15]
                ret = N_ERR;
            }
            else{
                ret = ERR;
            }
            break;
 8000388:	e037      	b.n	80003fa <GPIO_SetPinValue+0x102>
            else if(Value == GPIO_LOW){
 800038a:	797b      	ldrb	r3, [r7, #5]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d10d      	bne.n	80003ac <GPIO_SetPinValue+0xb4>
                CLR_BIT(GPIOB_ODR_REG, Pin);
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <GPIO_SetPinValue+0x114>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	79ba      	ldrb	r2, [r7, #6]
 8000396:	2101      	movs	r1, #1
 8000398:	fa01 f202 	lsl.w	r2, r1, r2
 800039c:	43d2      	mvns	r2, r2
 800039e:	4611      	mov	r1, r2
 80003a0:	4a1a      	ldr	r2, [pc, #104]	@ (800040c <GPIO_SetPinValue+0x114>)
 80003a2:	400b      	ands	r3, r1
 80003a4:	6013      	str	r3, [r2, #0]
                ret = N_ERR;
 80003a6:	2301      	movs	r3, #1
 80003a8:	73fb      	strb	r3, [r7, #15]
            break;
 80003aa:	e026      	b.n	80003fa <GPIO_SetPinValue+0x102>
                ret = ERR;
 80003ac:	2300      	movs	r3, #0
 80003ae:	73fb      	strb	r3, [r7, #15]
            break;
 80003b0:	e023      	b.n	80003fa <GPIO_SetPinValue+0x102>
        case GPIOC:
            if(Value == GPIO_HIGH){
 80003b2:	797b      	ldrb	r3, [r7, #5]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d10c      	bne.n	80003d2 <GPIO_SetPinValue+0xda>
                SET_BIT(GPIOC_ODR_REG, Pin);
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <GPIO_SetPinValue+0x118>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	79ba      	ldrb	r2, [r7, #6]
 80003be:	2101      	movs	r1, #1
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a12      	ldr	r2, [pc, #72]	@ (8000410 <GPIO_SetPinValue+0x118>)
 80003c8:	430b      	orrs	r3, r1
 80003ca:	6013      	str	r3, [r2, #0]
                ret = N_ERR;
 80003cc:	2301      	movs	r3, #1
 80003ce:	73fb      	strb	r3, [r7, #15]
                ret = N_ERR;
            }
            else{
                ret = ERR;
            }
            break;
 80003d0:	e012      	b.n	80003f8 <GPIO_SetPinValue+0x100>
            else if(Value == GPIO_LOW){
 80003d2:	797b      	ldrb	r3, [r7, #5]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d10d      	bne.n	80003f4 <GPIO_SetPinValue+0xfc>
                CLR_BIT(GPIOC_ODR_REG, Pin);
 80003d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000410 <GPIO_SetPinValue+0x118>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	79ba      	ldrb	r2, [r7, #6]
 80003de:	2101      	movs	r1, #1
 80003e0:	fa01 f202 	lsl.w	r2, r1, r2
 80003e4:	43d2      	mvns	r2, r2
 80003e6:	4611      	mov	r1, r2
 80003e8:	4a09      	ldr	r2, [pc, #36]	@ (8000410 <GPIO_SetPinValue+0x118>)
 80003ea:	400b      	ands	r3, r1
 80003ec:	6013      	str	r3, [r2, #0]
                ret = N_ERR;
 80003ee:	2301      	movs	r3, #1
 80003f0:	73fb      	strb	r3, [r7, #15]
            break;
 80003f2:	e001      	b.n	80003f8 <GPIO_SetPinValue+0x100>
                ret = ERR;
 80003f4:	2300      	movs	r3, #0
 80003f6:	73fb      	strb	r3, [r7, #15]
            break;
 80003f8:	bf00      	nop
    }

    return ret;
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3714      	adds	r7, #20
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	4001080c 	.word	0x4001080c
 800040c:	40010c0c 	.word	0x40010c0c
 8000410:	4001100c 	.word	0x4001100c

08000414 <GPIO_GetPinValue>:

STD_ERR GPIO_GetPinValue(uint8 Port, uint8 Pin, uint8 *Value){
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	603a      	str	r2, [r7, #0]
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	460b      	mov	r3, r1
 8000422:	71bb      	strb	r3, [r7, #6]
    STD_ERR ret = ERR;
 8000424:	2300      	movs	r3, #0
 8000426:	73fb      	strb	r3, [r7, #15]

    switch(Port){
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d022      	beq.n	8000474 <GPIO_GetPinValue+0x60>
 800042e:	2b02      	cmp	r3, #2
 8000430:	dc2e      	bgt.n	8000490 <GPIO_GetPinValue+0x7c>
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <GPIO_GetPinValue+0x28>
 8000436:	2b01      	cmp	r3, #1
 8000438:	d00e      	beq.n	8000458 <GPIO_GetPinValue+0x44>
 800043a:	e029      	b.n	8000490 <GPIO_GetPinValue+0x7c>
        case GPIOA:
            *Value = GET_BIT(GPIOA_IDR_REG, Pin);
 800043c:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <GPIO_GetPinValue+0x8c>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	79bb      	ldrb	r3, [r7, #6]
 8000442:	fa22 f303 	lsr.w	r3, r2, r3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	b2da      	uxtb	r2, r3
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	701a      	strb	r2, [r3, #0]
            ret = N_ERR;
 8000452:	2301      	movs	r3, #1
 8000454:	73fb      	strb	r3, [r7, #15]
            break;
 8000456:	e01d      	b.n	8000494 <GPIO_GetPinValue+0x80>
        case GPIOB:
            *Value = GET_BIT(GPIOB_IDR_REG, Pin);
 8000458:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <GPIO_GetPinValue+0x90>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	79bb      	ldrb	r3, [r7, #6]
 800045e:	fa22 f303 	lsr.w	r3, r2, r3
 8000462:	b2db      	uxtb	r3, r3
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	b2da      	uxtb	r2, r3
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	701a      	strb	r2, [r3, #0]
            ret = N_ERR;
 800046e:	2301      	movs	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]
            break;
 8000472:	e00f      	b.n	8000494 <GPIO_GetPinValue+0x80>
        case GPIOC:
            *Value = GET_BIT(GPIOC_IDR_REG, Pin);
 8000474:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <GPIO_GetPinValue+0x94>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	fa22 f303 	lsr.w	r3, r2, r3
 800047e:	b2db      	uxtb	r3, r3
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	b2da      	uxtb	r2, r3
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	701a      	strb	r2, [r3, #0]
            ret = N_ERR;
 800048a:	2301      	movs	r3, #1
 800048c:	73fb      	strb	r3, [r7, #15]
            break;
 800048e:	e001      	b.n	8000494 <GPIO_GetPinValue+0x80>
        default:
            ret = ERR;
 8000490:	2300      	movs	r3, #0
 8000492:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8000494:	7bfb      	ldrb	r3, [r7, #15]
}
 8000496:	4618      	mov	r0, r3
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40010808 	.word	0x40010808
 80004a4:	40010c08 	.word	0x40010c08
 80004a8:	40011008 	.word	0x40011008

080004ac <RCC_InitSysClk>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

/* -------------------- IMPLEMENTATIONS -------------------- */
STD_ERR RCC_InitSysClk(void){
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
    STD_ERR ret = ERR;
 80004b2:	2300      	movs	r3, #0
 80004b4:	71fb      	strb	r3, [r7, #7]
#if RCC_SYSCLK_SRC == HSI_CLK_SRC
    SET_BIT(RCC_CR_REG, RCC_CR_HSION);          // Enable HSI
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <RCC_InitSysClk+0x4c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a0f      	ldr	r2, [pc, #60]	@ (80004f8 <RCC_InitSysClk+0x4c>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6013      	str	r3, [r2, #0]
    while(!GET_BIT(RCC_CR_REG, RCC_CR_HSIRDY)); // Check if it is working
 80004c2:	bf00      	nop
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <RCC_InitSysClk+0x4c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f003 0302 	and.w	r3, r3, #2
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d0f9      	beq.n	80004c4 <RCC_InitSysClk+0x18>
    // Select HSI as clock source
    CLR_BIT(RCC_CFGR_REG, 0);
 80004d0:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <RCC_InitSysClk+0x50>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a09      	ldr	r2, [pc, #36]	@ (80004fc <RCC_InitSysClk+0x50>)
 80004d6:	f023 0301 	bic.w	r3, r3, #1
 80004da:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR_REG, 1);
 80004dc:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <RCC_InitSysClk+0x50>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <RCC_InitSysClk+0x50>)
 80004e2:	f023 0302 	bic.w	r3, r3, #2
 80004e6:	6013      	str	r3, [r2, #0]
    // RCC_CFGR = 0x00000000;       // Select HSI as clock source
    ret = N_ERR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	71fb      	strb	r3, [r7, #7]
    #error "ERROR! NO SYSTEM SOURCE EXISTS."
    ret = ERR;

#endif

    return ret;
 80004ec:	79fb      	ldrb	r3, [r7, #7]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40021004 	.word	0x40021004

08000500 <RCC_EnablePeripheralClk>:

STD_ERR RCC_EnablePeripheralClk(const uint8 BusId, const uint8 PeripheralId)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	460a      	mov	r2, r1
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	4613      	mov	r3, r2
 800050e:	71bb      	strb	r3, [r7, #6]
    STD_ERR ret = ERR;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]
    if (PeripheralId < 32)
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	2b1f      	cmp	r3, #31
 8000518:	d832      	bhi.n	8000580 <RCC_EnablePeripheralClk+0x80>
    {
        switch (BusId)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d020      	beq.n	8000562 <RCC_EnablePeripheralClk+0x62>
 8000520:	2b03      	cmp	r3, #3
 8000522:	dc2b      	bgt.n	800057c <RCC_EnablePeripheralClk+0x7c>
 8000524:	2b01      	cmp	r3, #1
 8000526:	d002      	beq.n	800052e <RCC_EnablePeripheralClk+0x2e>
 8000528:	2b02      	cmp	r3, #2
 800052a:	d00d      	beq.n	8000548 <RCC_EnablePeripheralClk+0x48>
 800052c:	e026      	b.n	800057c <RCC_EnablePeripheralClk+0x7c>
        {
        case RCC_AHB_BUS:
            SET_BIT(RCC_AHBENR_REG, PeripheralId);
 800052e:	4b17      	ldr	r3, [pc, #92]	@ (800058c <RCC_EnablePeripheralClk+0x8c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	79ba      	ldrb	r2, [r7, #6]
 8000534:	2101      	movs	r1, #1
 8000536:	fa01 f202 	lsl.w	r2, r1, r2
 800053a:	4611      	mov	r1, r2
 800053c:	4a13      	ldr	r2, [pc, #76]	@ (800058c <RCC_EnablePeripheralClk+0x8c>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6013      	str	r3, [r2, #0]
            ret =  N_ERR;
 8000542:	2301      	movs	r3, #1
 8000544:	73fb      	strb	r3, [r7, #15]
            break;
 8000546:	e01b      	b.n	8000580 <RCC_EnablePeripheralClk+0x80>
        case RCC_APB1_BUS:
            SET_BIT(RCC_APB1ENR_REG, PeripheralId);
 8000548:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <RCC_EnablePeripheralClk+0x90>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	79ba      	ldrb	r2, [r7, #6]
 800054e:	2101      	movs	r1, #1
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	4611      	mov	r1, r2
 8000556:	4a0e      	ldr	r2, [pc, #56]	@ (8000590 <RCC_EnablePeripheralClk+0x90>)
 8000558:	430b      	orrs	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
            ret =  N_ERR;
 800055c:	2301      	movs	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]
            break;
 8000560:	e00e      	b.n	8000580 <RCC_EnablePeripheralClk+0x80>
        case RCC_APB2_BUS:
            SET_BIT(RCC_APB2ENR_REG, PeripheralId);
 8000562:	4b0c      	ldr	r3, [pc, #48]	@ (8000594 <RCC_EnablePeripheralClk+0x94>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	79ba      	ldrb	r2, [r7, #6]
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	4611      	mov	r1, r2
 8000570:	4a08      	ldr	r2, [pc, #32]	@ (8000594 <RCC_EnablePeripheralClk+0x94>)
 8000572:	430b      	orrs	r3, r1
 8000574:	6013      	str	r3, [r2, #0]
            ret =  N_ERR;
 8000576:	2301      	movs	r3, #1
 8000578:	73fb      	strb	r3, [r7, #15]
            break;
 800057a:	e001      	b.n	8000580 <RCC_EnablePeripheralClk+0x80>
        default:
            ret =  ERR;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return ret;
 8000580:	7bfb      	ldrb	r3, [r7, #15]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	40021014 	.word	0x40021014
 8000590:	4002101c 	.word	0x4002101c
 8000594:	40021018 	.word	0x40021018

08000598 <main>:
#include "main.h"

/* -------------------- VARIABLES -------------------- */
uint8 button_state = BUTTON_RELEASED, prev_state = BUTTON_RELEASED;

int main(void){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

	/* Enable system clock and peripheral clocks */
	RCC_InitSysClk();
 800059c:	f7ff ff86 	bl	80004ac <RCC_InitSysClk>
	RCC_EnablePeripheralClk(RCC_APB2_BUS, RCC_APB2_IOPAEN);
 80005a0:	2102      	movs	r1, #2
 80005a2:	2003      	movs	r0, #3
 80005a4:	f7ff ffac 	bl	8000500 <RCC_EnablePeripheralClk>
	RCC_EnablePeripheralClk(RCC_APB2_BUS, RCC_APB2_IOPBEN);
 80005a8:	2103      	movs	r1, #3
 80005aa:	2003      	movs	r0, #3
 80005ac:	f7ff ffa8 	bl	8000500 <RCC_EnablePeripheralClk>

	/* Initializing pins direcion */
	GPIO_SetPinMode(GPIOA, GPIO_PIN1, GPIO_INPUT_PULL_UP_DOWN);
 80005b0:	2204      	movs	r2, #4
 80005b2:	2101      	movs	r1, #1
 80005b4:	2000      	movs	r0, #0
 80005b6:	f7ff fdc9 	bl	800014c <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOB, GPIO_PIN0, GPIO_OUTPUT_GP_PUSH_PULL_2MHz);
 80005ba:	2202      	movs	r2, #2
 80005bc:	2100      	movs	r1, #0
 80005be:	2001      	movs	r0, #1
 80005c0:	f7ff fdc4 	bl	800014c <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOB, GPIO_PIN1, GPIO_OUTPUT_GP_PUSH_PULL_2MHz);
 80005c4:	2202      	movs	r2, #2
 80005c6:	2101      	movs	r1, #1
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff fdbf 	bl	800014c <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOB, GPIO_PIN2, GPIO_OUTPUT_GP_PUSH_PULL_2MHz);
 80005ce:	2202      	movs	r2, #2
 80005d0:	2102      	movs	r1, #2
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff fdba 	bl	800014c <GPIO_SetPinMode>
	GPIO_SetPinMode(GPIOB, GPIO_PIN3, GPIO_OUTPUT_GP_PUSH_PULL_2MHz);
 80005d8:	2202      	movs	r2, #2
 80005da:	2103      	movs	r1, #3
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff fdb5 	bl	800014c <GPIO_SetPinMode>

  while (1){
	  /* Read button status */
	  GPIO_GetPinValue(GPIOA, GPIO_PIN1, &button_state);
 80005e2:	4a31      	ldr	r2, [pc, #196]	@ (80006a8 <main+0x110>)
 80005e4:	2101      	movs	r1, #1
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff ff14 	bl	8000414 <GPIO_GetPinValue>

	  if(button_state == BUTTON_PRESSED){
 80005ec:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <main+0x110>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d11d      	bne.n	8000630 <main+0x98>
		  /* Sequential LEDs ON */
		  GPIO_SetPinValue(GPIOB, GPIO_PIN0, GPIO_HIGH);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2100      	movs	r1, #0
 80005f8:	2001      	movs	r0, #1
 80005fa:	f7ff fe7d 	bl	80002f8 <GPIO_SetPinValue>
		  delay();
 80005fe:	f000 f857 	bl	80006b0 <delay>
		  GPIO_SetPinValue(GPIOB, GPIO_PIN1, GPIO_HIGH);
 8000602:	2201      	movs	r2, #1
 8000604:	2101      	movs	r1, #1
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff fe76 	bl	80002f8 <GPIO_SetPinValue>
		  delay();
 800060c:	f000 f850 	bl	80006b0 <delay>
		  GPIO_SetPinValue(GPIOB, GPIO_PIN2, GPIO_HIGH);
 8000610:	2201      	movs	r2, #1
 8000612:	2102      	movs	r1, #2
 8000614:	2001      	movs	r0, #1
 8000616:	f7ff fe6f 	bl	80002f8 <GPIO_SetPinValue>
		  delay();
 800061a:	f000 f849 	bl	80006b0 <delay>
		  GPIO_SetPinValue(GPIOB, GPIO_PIN3, GPIO_HIGH);
 800061e:	2201      	movs	r2, #1
 8000620:	2103      	movs	r1, #3
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff fe68 	bl	80002f8 <GPIO_SetPinValue>
		  prev_state = BUTTON_PRESSED;
 8000628:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <main+0x114>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	e7d8      	b.n	80005e2 <main+0x4a>
	  }
	  else if((button_state == BUTTON_RELEASED) && (prev_state == BUTTON_PRESSED)){
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <main+0x110>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d121      	bne.n	800067c <main+0xe4>
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <main+0x114>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d11d      	bne.n	800067c <main+0xe4>
		  /* Sequential LEDs OFF */
		  GPIO_SetPinValue(GPIOB, GPIO_PIN0, GPIO_LOW);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff fe57 	bl	80002f8 <GPIO_SetPinValue>
		  delay();
 800064a:	f000 f831 	bl	80006b0 <delay>
		  GPIO_SetPinValue(GPIOB, GPIO_PIN1, GPIO_LOW);
 800064e:	2200      	movs	r2, #0
 8000650:	2101      	movs	r1, #1
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff fe50 	bl	80002f8 <GPIO_SetPinValue>
		  delay();
 8000658:	f000 f82a 	bl	80006b0 <delay>
		  GPIO_SetPinValue(GPIOB, GPIO_PIN2, GPIO_LOW);
 800065c:	2200      	movs	r2, #0
 800065e:	2102      	movs	r1, #2
 8000660:	2001      	movs	r0, #1
 8000662:	f7ff fe49 	bl	80002f8 <GPIO_SetPinValue>
		  delay();
 8000666:	f000 f823 	bl	80006b0 <delay>
		  GPIO_SetPinValue(GPIOB, GPIO_PIN3, GPIO_LOW);
 800066a:	2200      	movs	r2, #0
 800066c:	2103      	movs	r1, #3
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff fe42 	bl	80002f8 <GPIO_SetPinValue>
		  prev_state = BUTTON_RELEASED;
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <main+0x114>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e013      	b.n	80006a4 <main+0x10c>
	  }
	  else{
		  /* Default LEDs OFF */
		  GPIO_SetPinValue(GPIOB, GPIO_PIN0, GPIO_LOW);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2001      	movs	r0, #1
 8000682:	f7ff fe39 	bl	80002f8 <GPIO_SetPinValue>
		  GPIO_SetPinValue(GPIOB, GPIO_PIN1, GPIO_LOW);
 8000686:	2200      	movs	r2, #0
 8000688:	2101      	movs	r1, #1
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff fe34 	bl	80002f8 <GPIO_SetPinValue>
		  GPIO_SetPinValue(GPIOB, GPIO_PIN2, GPIO_LOW);
 8000690:	2200      	movs	r2, #0
 8000692:	2102      	movs	r1, #2
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff fe2f 	bl	80002f8 <GPIO_SetPinValue>
		  GPIO_SetPinValue(GPIOB, GPIO_PIN3, GPIO_LOW);
 800069a:	2200      	movs	r2, #0
 800069c:	2103      	movs	r1, #3
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff fe2a 	bl	80002f8 <GPIO_SetPinValue>
	  GPIO_GetPinValue(GPIOA, GPIO_PIN1, &button_state);
 80006a4:	e79d      	b.n	80005e2 <main+0x4a>
 80006a6:	bf00      	nop
 80006a8:	20000020 	.word	0x20000020
 80006ac:	20000021 	.word	0x20000021

080006b0 <delay>:
  }

  return 0;
}

void delay(void){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	uint32 counter1 = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
	for(counter1 = 0; counter1 < 25000; counter1++);
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e002      	b.n	80006c6 <delay+0x16>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3301      	adds	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d9f7      	bls.n	80006c0 <delay+0x10>
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <NMI_Handler+0x4>

080006e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <MemManage_Handler+0x4>

080006f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <UsageFault_Handler+0x4>

08000704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072c:	f000 f82e 	bl	800078c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000740:	f7ff fff8 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480b      	ldr	r0, [pc, #44]	@ (8000774 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000746:	490c      	ldr	r1, [pc, #48]	@ (8000778 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000748:	4a0c      	ldr	r2, [pc, #48]	@ (800077c <LoopFillZerobss+0x16>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800075c:	4c09      	ldr	r4, [pc, #36]	@ (8000784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076a:	f000 f821 	bl	80007b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076e:	f7ff ff13 	bl	8000598 <main>
  bx lr
 8000772:	4770      	bx	lr
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800077c:	08000818 	.word	0x08000818
  ldr r2, =_sbss
 8000780:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000784:	20000028 	.word	0x20000028

08000788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_2_IRQHandler>
	...

0800078c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <HAL_IncTick+0x1c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <HAL_IncTick+0x20>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4413      	add	r3, r2
 800079c:	4a03      	ldr	r2, [pc, #12]	@ (80007ac <HAL_IncTick+0x20>)
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000024 	.word	0x20000024

080007b0 <__libc_init_array>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	2600      	movs	r6, #0
 80007b4:	4d0c      	ldr	r5, [pc, #48]	@ (80007e8 <__libc_init_array+0x38>)
 80007b6:	4c0d      	ldr	r4, [pc, #52]	@ (80007ec <__libc_init_array+0x3c>)
 80007b8:	1b64      	subs	r4, r4, r5
 80007ba:	10a4      	asrs	r4, r4, #2
 80007bc:	42a6      	cmp	r6, r4
 80007be:	d109      	bne.n	80007d4 <__libc_init_array+0x24>
 80007c0:	f000 f81a 	bl	80007f8 <_init>
 80007c4:	2600      	movs	r6, #0
 80007c6:	4d0a      	ldr	r5, [pc, #40]	@ (80007f0 <__libc_init_array+0x40>)
 80007c8:	4c0a      	ldr	r4, [pc, #40]	@ (80007f4 <__libc_init_array+0x44>)
 80007ca:	1b64      	subs	r4, r4, r5
 80007cc:	10a4      	asrs	r4, r4, #2
 80007ce:	42a6      	cmp	r6, r4
 80007d0:	d105      	bne.n	80007de <__libc_init_array+0x2e>
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d8:	4798      	blx	r3
 80007da:	3601      	adds	r6, #1
 80007dc:	e7ee      	b.n	80007bc <__libc_init_array+0xc>
 80007de:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e2:	4798      	blx	r3
 80007e4:	3601      	adds	r6, #1
 80007e6:	e7f2      	b.n	80007ce <__libc_init_array+0x1e>
 80007e8:	08000810 	.word	0x08000810
 80007ec:	08000810 	.word	0x08000810
 80007f0:	08000810 	.word	0x08000810
 80007f4:	08000814 	.word	0x08000814

080007f8 <_init>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	bf00      	nop
 80007fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fe:	bc08      	pop	{r3}
 8000800:	469e      	mov	lr, r3
 8000802:	4770      	bx	lr

08000804 <_fini>:
 8000804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000806:	bf00      	nop
 8000808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800080a:	bc08      	pop	{r3}
 800080c:	469e      	mov	lr, r3
 800080e:	4770      	bx	lr
